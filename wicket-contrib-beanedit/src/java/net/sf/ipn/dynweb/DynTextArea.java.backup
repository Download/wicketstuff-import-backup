
package net.sf.ipn.dynweb;


import java.io.Serializable;

import wicket.model.IModel;
import wicket.RequestCycle;
import wicket.markup.ComponentTag;
import wicket.markup.MarkupStream;
import wicket.markup.html.form.FormComponent;

/**
 * Multi-line text editing component for a dynamic form.
 * This replaces a &lt;span id="wcn-***"&gt;something&lt;/span&gt; set of tags
 * @author Jonathan Carlson
 */
public final class DynTextArea extends FormComponent implements FormComponent.ICookieValue
{
    /** Serial Version ID */
	private static final long serialVersionUID = -2123747673401786242L;

	/**
     * Constructor that uses the provided {@link IModel} as its model. All components have
     * names. A component's name cannot be null.
     * @param name The non-null name of this component
     * @param model the model
     * @throws wicket.RenderException Thrown if the component has
     * been given a null name.
     */
    public DynTextArea(String name, IModel model)
    {
        super(name, model);
    }

    /**
     * Constructor that uses the provided instance of {@link IModel} as a dynamic model.
     * This model will be wrapped in an instance of {@link wicket.PropertyModel}
     * using the provided expression. Thus, using this constructor is a short-hand for:
     * 
     * <pre>
     * new MyComponent(name, new PropertyModel(myIModel, expression));
     * </pre>
     * 
     * All components have names. A component's name cannot be null.
     * @param name The non-null name of this component
     * @param model the instance of {@link IModel} from which the model object will be
     *            used as the subject for the given expression
     * @param expression the OGNL expression that works on the given object
     * @throws wicket.RenderException Thrown if the component has been
     * given a null name.
     */
    public DynTextArea(String name, IModel model, String expression)
    {
        super(name, model, expression);
    }

    /**
     * Constructor that uses the provided object as a simple model. This object will be
     * wrapped in an instance of {@link wicket.Model}. All components have
     * names. A component's name cannot be null.
     * @param name The non-null name of this component
     * @param object the object that will be used as a simple model
     * @throws wicket.RenderException Thrown if the component has
     * been given a null name.
     */
    public DynTextArea(String name, Serializable object)
    {
        super(name, object);
    }

    /**
     * Constructor that uses the provided object as a dynamic model. This object will be
     * wrapped in an instance of {@link wicket.Model} that will be
     * wrapped in an instance of {@link wicket.PropertyModel} using the
     * provided expression. Thus, using this constructor is a short-hand for:
     * 
     * <pre>
     * new MyComponent(name, new PropertyModel(new Model(object), expression));
     * </pre>
     * 
     * All components have names. A component's name cannot be null.
     * @param name The non-null name of this component
     * @param object the object that will be used as the subject for the given expression
     * @param expression the OGNL expression that works on the given object
     * @throws wicket.RenderException Thrown if the component has
     * been given a null name.
     */
    public DynTextArea(String name, Serializable object, String expression)
    {
        super(name, object, expression);
    }

    /**
     * @see wicket.Component#handleComponentTag(RequestCycle, ComponentTag)
     */
    protected void onComponentTag(final ComponentTag tag)
    {
    	tag.setName("textarea");
    	// TODO: set rows, columns, etc from metadata
      super.onComponentTag(tag);
    }

    /**
     * @see wicket.Component#handleBody(RequestCycle, MarkupStream,
     *      ComponentTag)
     */
    protected void handleBody(final MarkupStream markupStream,
            final ComponentTag openTag)
    {
        replaceBody(markupStream, openTag, getModelObjectAsString());
    }

    /**
     * @see wicket.markup.html.form.FormComponent#updateModel(wicket.RequestCycle)
     */
    public void updateModel()
    {
        setModelObject(getRequestString());
    }

    /**
     * @see wicket.markup.html.form.FormComponent.ICookieValue#getCookieValue()
     */
    public String getCookieValue()
    {
        return getModelObjectAsString();
    }

    /**
     * @see wicket.markup.html.form.FormComponent.ICookieValue#setCookieValue(java.lang.String)
     */
    public void setCookieValue(String value)
    {
        setModelObject(value);
    }
}

///////////////////////////////// End of File /////////////////////////////////
