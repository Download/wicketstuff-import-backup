# Simple Log properties file
# $Id: simplelog.properties,v 1.6 2005/08/09 11:44:35 grlea Exp $

# Copyright (c) 2004-2005 Graham Lea. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


###################################################################################################
# Introduction
#
# This is the properties file for Simple Log, which contains the pretty much all of the
# documentation for configuring Simple Log.
#
# Each property is fully documented, explaining its purpose, possible values, default value and,
# where applicable, examples.
#
# The file is now organised into sections with large headings for easier navigation.
#
# For easy access, the debug levels and trace flags (which you'll probably be editing most often)
# are at the end of the file.
# (Use CTRL-End to jump to the end of the file.)



###################################################################################################
# Contents
#
# Log File Properties
#
#     simplelog.logFile
#     simplelog.logFile.interpretName
#     simplelog.logFile.append
#     simplelog.logFile.andConsole
#
# Configuration Management Properties
#
#     simplelog.reloading
#
# General Format Properties
#
#     simplelog.printStackTraces
#     simplelog.dateFormat
#
# Specific Format Properties
#
#     simplelog.format.debug
#     simplelog.format.debugObject
#     simplelog.format.debugException
#     simplelog.format.entry
#     simplelog.format.exit
#
#     simplelog.format.debug.instance
#     simplelog.format.debugObject.instance
#     simplelog.format.debugException.instance
#     simplelog.format.entry.instance
#     simplelog.format.exit.instance
#
# Tracing
#
# Debug Levels
#
# Default Debug and Trace Levels
#
#     simplelog.defaultLevel
#     simplelog.defaultTrace
#


###################################################################################################
# Log File Properties


# Send log output to a file (rather than to System.err): relative or absolute file name.
#
# If the interpretName property is true (default), the file name will be interpreted using a
# MessageFormat, with argument 0 being the current Date. This allows the date to be inserted into
# the file name using patterns like {0,date,yyyy_MM_dd} or {0,date,yyyy} and {0,date,MM}, etc.
#
# Relative paths are relative to the JVM's working directory.
# Non-existing directories are created.
# Output falls back to System.err if the file name can't be interpreted or the file can't be opened
# for writing.
#
# Default: <blank>

#simplelog.logFile =



# Whether the logFile property should be interpreted using a MessageFormat: true or false
# See the description for simplelog.logFile above for more details.
#
# Default: true

#simplelog.logFile.interpretName = true



# When writing log output to a file, append to the file if it already exists: true or false
#
# Default: true

#simplelog.logFile.append = true



# Whether the logging output going to a file should also be output to the console: true or false
# Only applies when simplelog.logFile is assigned.
#
# Default: false

#simplelog.logFile.andConsole = false



###################################################################################################
# Configuration Management Properties


# Reload properties if they change: true or false
#
# Default: false

#simplelog.reloading = false



###################################################################################################
# General Format Properties


# Whether the exception message should print a stack trace: true or false
#
# Default: true

#simplelog.printStackTraces = true



# Date format for ALL message formats: see java.text.SimpleDateFormat
#
# Default: EEE yyyy/MM/dd HH:mm:ss.SSS

simplelog.dateFormat = EEE yyyy-MM-dd HH:mm:ss.SSS



###################################################################################################
# Specific Format Properties


# Message formats for each type of logging: see java.text.MessageFormat
# Note there is a different format for SimpleLoggers created on a per-instance basis
#
# The common message arguments are:
#
# {0} = Current date/time (java.util.Date)
# {1} = Thread name (String)
# {2} = Class name (String)
# {3} = Instance ID (Object)
# {4} = Debug level (DebugLevel)
#
# The uncommon message arguments are:
#
# debug:          {5} = message
# debugObject:    {5} = object name, {6} = object value
# debugException: {5} = exception
# entry:          {5} = method name
# exit:           {5} = method name

#simplelog.format.debug =           {0}|   |{1}|{2}|{5}
#simplelog.format.debugObject =     {0}|---|{1}|{2}|{5}|{6}
#simplelog.format.debugException =  {0}|***|{1}|{2}|{5}
#simplelog.format.entry =           {0}|>>>|{1}|{2}|{5}
#simplelog.format.exit =            {0}|<<<|{1}|{2}|{5}

#simplelog.format.debug.instance =           {0}|   |{1}|{2}[{3}]|{5}
#simplelog.format.debugObject.instance =     {0}|---|{1}|{2}[{3}]|{5}|{6}
#simplelog.format.debugException.instance =  {0}|***|{1}|{2}[{3}]|{5}
#simplelog.format.entry.instance =           {0}|>>>|{1}|{2}[{3}]|{5}
#simplelog.format.exit.instance =            {0}|<<<|{1}|{2}[{3}]|{5}

simplelog.format.debug =           {0}|   |{1}|{4}|{2}|{5}
simplelog.format.debugObject =     {0}|---|{1}|{4}|{2}|{5}|{6}
simplelog.format.debugException =  {0}|***|{1}|{4}|{2}|{5}
simplelog.format.entry =           {0}|>>>|{1}|{4}|{2}|{5}
simplelog.format.exit =            {0}|<<<|{1}|{4}|{2}|{5}

# Used by the SLFJ adapter, for instance
simplelog.format.debug.instance =           {0}|   |{1}|{4}|{2}[{3}]|{5}
simplelog.format.debugObject.instance =     {0}|---|{1}|{4}|{2}[{3}]|{5}|{6}
simplelog.format.debugException.instance =  {0}|***|{1}|{4}|{2}[{3}]|{5}
simplelog.format.entry.instance =           {0}|>>>|{1}|{4}|{2}[{3}]|{5}
simplelog.format.exit.instance =            {0}|<<<|{1}|{4}|{2}[{3}]|{5}



###################################################################################################
# Tracing
#
# Tracing is the same as debug levels except the string '#trace' must be appended to the class or
# package name, and the values are true or false.
#
# Example:
#
# org.grlea.application.ApplicationMain#trace true
# org.grlea.application#trace false


### START TRACING ###



### END TRACING ###


###################################################################################################
# Debug Levels
#
# Debug levels for classes and packages are defined simply by entering a fully-qualified class or
# package name and making the value either the number or name of one of Simple Log's DebugLevels.
# (Note that the '=' is optional in Java properties files).
#
# When the name of a debug level is used:
#    - the "Lx_" prefix from the field name is NOT used (e.g. the name of L1_FATAL is "FATAL");
#    - the names are case-insensitive (i.e. "FATAL" = "Fatal" = "fatal")
#
# The debug level for a class is acquired hierarchically:
# First the class name is sought, then its package, then its parent package, etc.
# If no level is found for a class or any of its containing packages, the default level is used.
#
# Levels are defined as:
# (see org.grlea.log.DebugLevel javadoc for details)
#
#     1 = Fatal
#     2 = Error
#     3 = Warning
#     4 = Info
#     5 = Debug
#     6 = Verbose
#     7 = Ludicrous
#
# Example: org.grlea.application.ApplicationMain:       Verbose
#          All other 'org.grlea.application' classes:   Debug
#          All other 'org.grlea' classes:               Error
#
# org.grlea.application.ApplicationMain 6
# org.grlea.application 5
# org.grlea 2
#
#    OR
#
# org.grlea.application.ApplicationMain = verbose
# org.grlea.application = debug
# org.grlea = error
#
# Inner Classes:
# Debug levels and trace flags for inner classes can be specified using either the dollar sign ('$')
# that javac puts in the name or just the normal period ('.') that you use to access them in code.
#
# Instance Loggers:
# If you are using instance loggers, you can specify levels for particular instances by appending
# to the class name a period ('.') and the string representation of the instance ID.
#
# Example: To log the 'InstanceObject' instance with instance ID 'Special' at the Verbose level
#          and all other InstanceObject instances at the Error level, one would write:
#
# org.grlea.application.InstanceObject.Special = verbose
# org.grlea.application.InstanceObject = error

### START DEBUG LEVELS ###
#wicket                      = Debug
### END DEBUG LEVELS ###

#### START INFO LEVELS ###
#wicket.util.resource        = Info
#wicket.util.thread.Task     = Info
### END INFO LEVELS ###



###################################################################################################
# Default Debug and Trace Levels


# Default level for classes for which no debug level hierarchy exists:
# same numbers as normal (i.e. 1 to 7 or Fatal, Error, Warn, Info, Debug, Verbose or Ludicrous)
#
# Default: 4 (Info)

#simplelog.defaultLevel = 4



# Default tracing for classes for which no tracing hierarchy exists: true or false
#
# Default: false

#simplelog.defaultTrace = false

