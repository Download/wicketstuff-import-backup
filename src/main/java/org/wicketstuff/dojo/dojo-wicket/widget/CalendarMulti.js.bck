dojo.provide("dojo.widget.Calendar");

dojo.require("dojo.html.*");
dojo.require("dojo.widget.*");
dojo.require("dojo.collections.ArrayList");
dojo.require("dojo.collections.Store");
dojo.require("dojo.json");

dojo.widget.defineWidget (
	"dojo.widget.Calendar",
	dojo.widget.HtmlWidget,
	{
	
	templatePath: "Calendar.htm",
	templateCssPath: "DayCalendar.css",
	
	/**
	 *
	 */
	//width and height of a slice time
	sliceTimeWidth: 100,
	sliceTimeHeight: 10,
	
	//true if mouse is down
	mouseDown: false,
	
	//tmp slice 
	current: null,
	
	postCreate: function(args, fragment, parent){
		this.domNode.style.width = 7 * this.sliceTimeWidth + "px";
		
		this._createDay("Sunday", 0);
		this._createDay("Monday", 1);
		this._createDay("Tuesday", 2);
		this._createDay("Wednesday", 3);
		this._createDay("Thursday", 4);
		this._createDay("Friday", 5);
		this._createDay("Saturday", 6);
		
		dojo.event.connect(document, "onmouseup", this, "mouseUpDocument");
		dojo.event.connect(this.domNode, "onmousemove", this, "mouseMoveOnCalendar");
	},
	
	_createDay: function(/**String*/ dayStr, /** int */ dayPos){
		var day = document.createElement("div");
		with(day.style){
			cssFloat = "left";
			position = "relative";
			zIndex= "1";
		}
		
		for(var i=0; i<48; i++){
			var div = document.createElement("div");
			div.className = "timeArea";
			with(div.style){
				cursor = "default"; 
				borderStyle = "solid"; 
				borderBottomWidth = "1px"; 
				borderLeftWidth = "1px"; 
				borderTopWidth = "0px"; 
				borderRightWidth = "0px"; 
				width = this.sliceTimeWidth -1 + "px"; 
				height = this.sliceTimeHeight -1 + "px"; 
				maxHeight = this.sliceTimeHeight -1 + "px"; 
				overflow = "hidden";
			}
			var pos = this._getStartEndPosForI(i);
			div.setAttribute("pos", pos.pos);
			div.setAttribute("start", pos.start);
			div.setAttribute("end", pos.end);
			div.setAttribute("dayPos", dayPos);
			div.setAttribute("dayStr", dayStr);
			day.appendChild(div);
			
			this.domNode.appendChild(day);
			
			//connect events
			dojo.event.connect(div, "onmouseover", this, "mouseOverDiv");
			dojo.event.connect(div, "onmouseout", this, "mouseOutDiv");
		
			//event to create div
			dojo.event.connect(div, "onmousedown", this, "mouseDownDiv");
		}
		
		day.setAttribute("day", dayStr);
		day.setAttribute("dayPos", dayPos);
	},
	
	/**
	 * Transform a position on a time interval
	 */
	_getStartEndPosForI: function(i){
		var obj={};
		if(i%2 == 0){
			obj.start = this._toTwoDigits(parseInt(i/2)) + ":" + "00";
			obj.end   = this._toTwoDigits(parseInt(i/2)) + ":" + "30";
		}else{
			obj.start = this._toTwoDigits(parseInt(i/2)) + ":" + "30";
			obj.end   = this._toTwoDigits(parseInt(i/2) + 1) + ":" + "00";
		}
		obj.pos = this._toTwoDigits(i);
		return obj;
	},
	
	/**
	 * Get an int to return a string représenting the int on
	 * two digits
	 */
	_toTwoDigits: function(/**int*/ i){
		if( i<10 ){
			return "0" + i ;
		}
		return i + "";
	},
	
	_getDivUnderMouse: function(cursor){
		var pos = dojo.html.toCoordinateObject(this.domNode,true);
		var y = cursor.y - pos.top;
		var x = cursor.x - pos.left ;
		
		var divYPos = Math.floor(y/this.sliceTimeHeight);
		var divXPos = Math.floor(x/this.sliceTimeWidth) + 1;
		if (divYPos < 0 || divXPos < 0){
			return null;
		}
		return this.domNode.childNodes[divXPos].childNodes[divYPos];
	},
	
	/*********************************************/
	/**                 Events                  **/
	/*********************************************/
	mouseOverDiv: function(e){
		e.target.innerHTML = e.target.getAttribute("start") + " - " + e.target.getAttribute("end"); 
	},
	mouseOutDiv:  function(e){
		e.target.innerHTML = "";
	},
	
	mouseDownDiv: function(e){
		var div = e.target;
		var sliceTime = new dojo.widget.SliceTime();
		sliceTime.sliceTimeWidth = this.sliceTimeWidth;
		sliceTime.sliceTimeHeight = this.sliceTimeHeight;
		sliceTime.begin(div, this.domNode);
		this.mouseDown = true;
		
		this.current = sliceTime;
	},
	
	mouseUpDocument: function(e){
		this.mouseDown = false;
	},
	
	mouseMoveOnCalendar: function(e){
		if(this.mouseDown){
			var cursor = dojo.html.getCursorPosition(e);
			var div = this._getDivUnderMouse(cursor);
			if (div != null){
				this.current.resizeTo(div);
			}
		}
	}
	
});

dojo.widget.defineWidget (
	"dojo.widget.SliceTime",
	null,
	{
	
	domNode: null,
	first: null,
	last: null,
	
	//time is the anchor, other are additionnals ones
	time: null,
	timeOthers: null,
	timeEnd: null,
	
	//width and height of a slice time
	sliceTimeWidth: 0,
	sliceTimeHeight: 0,
	
	//div to resize
	resizer:null,
	
	//header
	header:null,
	
	//isMouseDown on resizer?
	mouseDownOnResizer : false,
	//isMouseDown on header?
	mouseDownOnHeader : false,
	
	/** EVENTS **/
	
	mouseDownOnResizerNode: function(e){
		this.mouseDownOnResizer = true;
	},
	
	mouseDownOnHeaderNode: function(e){
		this.mouseDownOnHeader = true;
	},

	mouseMoveOnDomNode: function(e){
		if(this.mouseDownOnResizer){
			var cursor = dojo.html.getCursorPosition(e);
			var div = this._getDivUnderMouse(cursor);
			this.resizeTo(div);
		}
		if(this.mouseDownOnHeader){
			var cursor = dojo.html.getCursorPosition(e);
			var div = this._getDivUnderMouse(cursor);
			
			//store old start and end
			var oldStartPos = parseInt(this.first.getAttribute("pos"), 10);
			var oldStartPosDay = parseInt(this.first.getAttribute("dayPos"), 10);
			var oldEndPos = parseInt(this.last.getAttribute("pos"), 10);
			var oldEndPosDay = parseInt(this.last.getAttribute("dayPos"), 10);
			if(oldStartPosDay > oldEndPosDay || (oldStartPosDay == oldEndPosDay && oldStartPos > oldEndPos )){
				this._switchStartEnd();
			}
			
			var pos = dojo.html.toCoordinateObject(div,true);
			var domNodePos = dojo.html.toCoordinateObject(this.domNode,true);
			
			var computedTop = pos.top - domNodePos.top;
			
			//DO not drag if
			// bottom is bigger than down limit AND is is a simple div (a unique day)
			if (computedTop + parseInt(this.time.style.height) + this.sliceTimeHeight > domNodePos.top + domNodePos.height && this.timeEnd == null){
				return;
			}
			//Also stop if right is after right limit
			dojo.debug(parseInt(div.getAttribute("dayPos")) + this.timeOthers.get().length + 1);
			if (this.timeEnd != null && parseInt(div.getAttribute("dayPos")) + this.timeOthers.get().length >= 6){
				return;
			}
			
			with(this.time.style){
				top = computedTop + "px";
				left = pos.left - domNodePos.left + "px";
			}
			
			this.first = div;
			
			var startPosMove = parseInt(this.first.getAttribute("pos"),10) - oldStartPos;
			var startPosDayMove = parseInt(this.first.getAttribute("dayPos"),10) - oldStartPosDay;
			
			if (startPosMove != 0 || startPosDayMove !=0){
				dojo.debug((oldEndPosDay + startPosDayMove) + "  :  " + (oldEndPos + startPosMove));
				var div = this.domNode.childNodes[oldEndPosDay + startPosDayMove + 1].childNodes[(oldEndPos + startPosMove)];
				this.resizeTo(div);
			}
			
			
		}
	},
	
	mouseUpOnDocument: function(e){
		this.mouseDownOnResizer = false;
		this.mouseDownOnHeader = false;
	},
	
	/** FUNCTIONS **/
	_getDivUnderMouse: function(cursor){
		var pos = dojo.html.toCoordinateObject(this.domNode,true);
		var y = cursor.y - pos.top;
		var x = cursor.x - pos.left ;
		
		var divYPos = Math.floor(y/this.sliceTimeHeight);
		var divXPos = Math.floor(x/this.sliceTimeWidth) + 1;
		if (divYPos < 0 || divXPos < 0){
			return null;
		}
		return this.domNode.childNodes[divXPos].childNodes[divYPos];
	},

	begin: function(div, parent){
		dojo.debug("create")
		this.timeOthers = new dojo.collections.Store();
		this.first = div;
		this.domNode = parent;
		var slice = this._createDivSlice(div);
		this.time = slice;
		
		//create a resizer to resize the SliceTime
		this._createResizer();
		this._placeResizer(div);
		
		//create the header and place it
		this._createHeader();
		this._placeHeader(div);
	},
	
	_createDivSlice: function(div){
		var pos = dojo.html.toCoordinateObject(div,true);
		var domNodePos = dojo.html.toCoordinateObject(this.domNode,true);
		var slice = document.createElement("div");
		with (slice.style){
			borderStyle = "solid";
			borderColor = "#0000FF";
			backgroundColor = "#AAAAFF";
			borderWidth = "1px";
			height = pos.height - 3 +"px";
			width = pos.width - 3 + "px";
			position = "absolute";
			top = pos.top - domNodePos.top + "px";
			left = pos.left - domNodePos.left + "px";
			zIndex = "2"; 
		}
		this.domNode.appendChild(slice);
		dojo.html.setOpacity(slice, 0.8, false);
		
		return slice;
	},
	
	_createResizer: function(){
		this.resizer = document.createElement("div");
		this.domNode.appendChild(this.resizer);
		with(this.resizer.style){
			width = this.sliceTimeWidth - 4 + "px";
			height = this.sliceTimeHeight - 2 + "px";
			overflow = "hidden";
			textAlign = "center";
			position = "absolute";
			zIndex = 5;
		}
		this.resizer.innerHTML="=";
		
		dojo.event.connect(this.resizer, "onmousedown", this, "mouseDownOnResizerNode");
		dojo.event.connect(this.domNode, "onmousemove", this, "mouseMoveOnDomNode");
		dojo.event.connect(document, "onmouseup", this, "mouseUpOnDocument");
	},
	
	_placeResizer: function(/** DomNode */ onTo){
		var onToPos = dojo.html.toCoordinateObject(onTo,true);
		with(this.resizer.style){
			top = onToPos.top - this.sliceTimeHeight + 2 +"px";
			left = onToPos.left - 6 + "px";
		}
	},
	
	_createHeader: function(){
		this.header = document.createElement("div");
		this.domNode.appendChild(this.header);
		with(this.header.style){
			width = this.sliceTimeWidth - 2 + "px";
			height = this.sliceTimeHeight + "px";
			overflow = "hidden";
			textAlign = "center";
			position = "absolute";
			zIndex = 4;
			color = "white";
			backgroundColor = "blue";
			cursor = "move";
		}
		
		dojo.event.connect(this.header, "onmousedown", this, "mouseDownOnHeaderNode");
	},
	
	_placeHeader: function(/** DomNode */ onTo){
		var onToPos = dojo.html.toCoordinateObject(onTo,true);
		with(this.header.style){
			top = onToPos.top - this.sliceTimeHeight + 1 +"px";
			left = onToPos.left - 7 + "px";
		}
		this._setInnerHead();
	},
	
	_setInnerHead: function(){
		this.header.innerHTML= this.first.getAttribute("start") + " - ";
		if (this.last){
			this.header.innerHTML +=  this.last.getAttribute("end");
		}else{
			this.header.innerHTML +=  this.first.getAttribute("end");
		}
	},
	
	_switchStartEnd: function(){
		var start = this.first;
		this.first = this.last;
		this.last = start;
	},
	
	resizeTo: function(div){
		this.last = div;
	
		var newTop;
		var newLeft;
		var newHeigth;
		var newWidth;
		var firstPos = dojo.html.toCoordinateObject(this.first,true);
		var lastPos = dojo.html.toCoordinateObject(this.last,true);
		var domNodePos = dojo.html.toCoordinateObject(this.domNode,true);
		
		var firstDayPos = parseInt(this.first.getAttribute("dayPos"));
		var lastDayPos  = parseInt(this.last.getAttribute("dayPos"));
		
		//if(this.first.getAttribute("dayPos") == this.last.getAttribute("dayPos")){
			//the 2 divs are on the same day
			if(this.first.getAttribute("pos") < this.last.getAttribute("pos")){
				newTop = firstPos.top;
				newHeight = lastPos.top - firstPos.top + lastPos.height;
				this._placeResizer(this.last);
				this._placeHeader(this.first);
			}else{
				newTop = lastPos.top;
				newHeight = firstPos.top - lastPos.top + firstPos.height;
				this._placeResizer(this.first);
				this._placeHeader(this.last);
			}
			if(this.timeEnd != null){
				this.timeEnd.parentNode.removeChild(this.timeEnd);
				this.timeEnd = null;
				this.timeEndSide = null;
			}
		/*}else if(firstDayPos > lastDayPos){
			//end is a day before start
			newTop = 0 +  domNodePos.top;
			newHeight = firstPos.top + 1;
			for(var i=0; i< 7; i++){
				var index = i + 1 + "";
				if(i < firstDayPos - lastDayPos -1){
					if(this.timeOthers.getDataByKey(index) == null){
						//add the slice
						var slice = this._createEntireDivOn(firstDayPos - i);
						this.timeOthers.addData(slice, index);
					}//else : it already exists
				}else{
					//have to be removed if exists
					var toRemove = this.timeOthers.getDataByKey(index);
					if( toRemove != null){
						this.timeOthers.removeDataByKey(index);
						toRemove.parentNode.removeChild(toRemove);	
					}
				}
			}
			if (div == null){
				div = this.domNode.getElementsByTagName("div")[lastDayPos].childNodes[this.last.getAttribute("pos")];
			}
			if (this.timeEnd == null){
				this.timeEnd = this._createDivSlice(div);
			}
			with (this.timeEnd.style){
		 		height = (48 - this.last.getAttribute("pos"))*this.sliceTimeHeight - 3 + "px";
		 		left = lastPos.left - domNodePos.left + "px";
		 		top = lastPos.top - this.sliceTimeHeight;
			}
			this._placeResizer(this.first);
			this._placeHeader(this.last);
			
		}else if(firstDayPos < lastDayPos){
			//end is a day after start
			newTop = firstPos.top;
			newHeight = 49 * this.sliceTimeHeight - newTop;
			for(var i=0; i< 7; i++){
				var index = i + "";
				if(i > firstDayPos + 1 && i<= lastDayPos){
					if(this.timeOthers.getDataByKey(index) == null){
						//add the slice
						var slice = this._createEntireDivOn(index);
						this.timeOthers.addData(slice, index);
					}//else : it already exists
				}else{
					//have to be removed if exists
					var toRemove = this.timeOthers.getDataByKey(index);
					if( toRemove != null){
						this.timeOthers.removeDataByKey(index);
						toRemove.parentNode.removeChild(toRemove);	
					}
				}
			}
			var div = this.domNode.childNodes[lastDayPos].childNodes[0]
			if (this.timeEnd == null){
				this.timeEnd = this._createDivSlice(div);
			}
			with (this.timeEnd.style){
		 		height = (parseInt(this.last.getAttribute("pos"), 10) + 1)*this.sliceTimeHeight - 3 + "px";
		 		left = lastPos.left - domNodePos.left + "px";
		 		top = dojo.html.toCoordinateObject(div).top - this.sliceTimeHeight  + 1 
			}
			
			this._placeResizer(this.last);
			this._placeHeader(this.first);
		}*/
		
		var domNodePos = dojo.html.toCoordinateObject(this.domNode,true);
		
		with (this.time.style){
			borderStyle = "solid";
			borderColor = "#0000FF";
			borderWidth = "1px";
			height = newHeight -3 +"px";
			width = firstPos.width - 3 + "px";
			position = "absolute";
			top = newTop - domNodePos.top + "px";
			left = firstPos.left - domNodePos.left + "px"; 
		}
	},
	
	_createEntireDivOn: function(/**int*/ i){
		var div = this.domNode.childNodes[i].childNodes[0];
		var slice = this._createDivSlice(div);
		with (slice.style){
		 	height = 48 * this.sliceTimeHeight -3 + "px";
		}
		return slice;
	}

});