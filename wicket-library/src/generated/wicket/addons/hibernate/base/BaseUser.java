package wicket.addons.hibernate.base;

import java.io.Serializable;


/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 *
 * This is an object that contains data related to the USERS table.
 * Do not modify this class because it will be overwritten if the configuration file
 * related to this class is modified.
 *
 * @hibernate.class
 *  table="USERS"
 */
public abstract class BaseUser  implements Serializable {

	public static String PROP_LAST_MODIFIED = "lastModified";
	public static String PROP_PASSWORD = "password";
	public static String PROP_LOCALE = "locale";
	public static String PROP_EMAIL = "email";
	public static String PROP_LASTNAME = "lastname";
	public static String PROP_FIRSTNAME = "firstname";
	public static String PROP_DEACTIVATED = "deactivated";
	public static String PROP_DELETED = "deleted";
	public static String PROP_NICKNAME = "nickname";
	public static String PROP_LAST_LOGIN = "lastLogin";
	public static String PROP_ID = "id";


	private int hashCode = Integer.MIN_VALUE;

	// primary key
	private int _id;

	// fields
	private java.lang.String _nickname;
	private java.lang.String _firstname;
	private java.lang.String _lastname;
	private java.lang.String _email;
	private java.lang.String _locale;
	private java.lang.String _password;
	private java.util.Date _lastModified;
	private java.util.Date _deleted;
	private java.util.Date _lastLogin;
	private java.util.Date _deactivated;


	// constructors
	public BaseUser () {
		initialize();
	}

	/**
	 * Constructor for primary key
	 */
	public BaseUser (int _id) {
		this.setId(_id);
		initialize();
	}

	/**
	 * Constructor for required fields
	 */
	public BaseUser (
		int _id,
		java.lang.String _nickname,
		java.util.Date _lastModified) {

		this.setId(_id);
		this.setNickname(_nickname);
		this.setLastModified(_lastModified);
		initialize();
	}

	protected void initialize () {}



	/**
	 * Return the unique identifier of this class
     * @hibernate.id
     *  generator-class="identity"
     *  column="id"
     */
	public int getId () {
		return _id;
	}

	/**
	 * Set the unique identifier of this class
	 * @param _id the new ID
	 */
	public void setId (int _id) {
		this._id = _id;
		this.hashCode = Integer.MIN_VALUE;
	}


	/**
	 * Return the value associated with the column: NICKNAME
	 */
	public java.lang.String getNickname () {
		return _nickname;
	}

	/**
	 * Set the value related to the column: NICKNAME
	 * @param _nickname the NICKNAME value
	 */
	public void setNickname (java.lang.String _nickname) {
		this._nickname = _nickname;
	}


	/**
	 * Return the value associated with the column: FIRSTNAME
	 */
	public java.lang.String getFirstname () {
		return _firstname;
	}

	/**
	 * Set the value related to the column: FIRSTNAME
	 * @param _firstname the FIRSTNAME value
	 */
	public void setFirstname (java.lang.String _firstname) {
		this._firstname = _firstname;
	}


	/**
	 * Return the value associated with the column: LASTNAME
	 */
	public java.lang.String getLastname () {
		return _lastname;
	}

	/**
	 * Set the value related to the column: LASTNAME
	 * @param _lastname the LASTNAME value
	 */
	public void setLastname (java.lang.String _lastname) {
		this._lastname = _lastname;
	}


	/**
	 * Return the value associated with the column: EMAIL
	 */
	public java.lang.String getEmail () {
		return _email;
	}

	/**
	 * Set the value related to the column: EMAIL
	 * @param _email the EMAIL value
	 */
	public void setEmail (java.lang.String _email) {
		this._email = _email;
	}


	/**
	 * Return the value associated with the column: LOCALE
	 */
	public java.lang.String getLocale () {
		return _locale;
	}

	/**
	 * Set the value related to the column: LOCALE
	 * @param _locale the LOCALE value
	 */
	public void setLocale (java.lang.String _locale) {
		this._locale = _locale;
	}


	/**
	 * Return the value associated with the column: PASSWORD
	 */
	public java.lang.String getPassword () {
		return _password;
	}

	/**
	 * Set the value related to the column: PASSWORD
	 * @param _password the PASSWORD value
	 */
	public void setPassword (java.lang.String _password) {
		this._password = _password;
	}


	/**
	 * Return the value associated with the column: LASTMODIFIED
	 */
	public java.util.Date getLastModified () {
		return _lastModified;
	}

	/**
	 * Set the value related to the column: LASTMODIFIED
	 * @param _lastModified the LASTMODIFIED value
	 */
	public void setLastModified (java.util.Date _lastModified) {
		this._lastModified = _lastModified;
	}


	/**
	 * Return the value associated with the column: DELETED
	 */
	public java.util.Date getDeleted () {
		return _deleted;
	}

	/**
	 * Set the value related to the column: DELETED
	 * @param _deleted the DELETED value
	 */
	public void setDeleted (java.util.Date _deleted) {
		this._deleted = _deleted;
	}


	/**
	 * Return the value associated with the column: LASTLOGIN
	 */
	public java.util.Date getLastLogin () {
		return _lastLogin;
	}

	/**
	 * Set the value related to the column: LASTLOGIN
	 * @param _lastLogin the LASTLOGIN value
	 */
	public void setLastLogin (java.util.Date _lastLogin) {
		this._lastLogin = _lastLogin;
	}


	/**
	 * Return the value associated with the column: DEACTIVATED
	 */
	public java.util.Date getDeactivated () {
		return _deactivated;
	}

	/**
	 * Set the value related to the column: DEACTIVATED
	 * @param _deactivated the DEACTIVATED value
	 */
	public void setDeactivated (java.util.Date _deactivated) {
		this._deactivated = _deactivated;
	}


	public boolean equals (Object obj) {
		if (null == obj) return false;
		if (!(obj instanceof wicket.addons.hibernate.base.BaseUser)) return false;
		else {
			wicket.addons.hibernate.base.BaseUser mObj = (wicket.addons.hibernate.base.BaseUser) obj;
			return (this.getId() == mObj.getId());
		}
	}


	public int hashCode () {
		if (Integer.MIN_VALUE == this.hashCode) {
			return (int) this.getId();
		}
		return this.hashCode;
	}


	public String toString () {
		return super.toString();
	}

}